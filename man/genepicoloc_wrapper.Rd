% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/colocalization.R
\name{genepicoloc_wrapper}
\alias{genepicoloc_wrapper}
\title{Three-level pipeline hierarchy:
\enumerate{
\item genepicoloc_wrapper() - Splits regions into jobs, manages parallelization
\item genepicoloc_job() - Processes one job (region subset, all datasets)
\item genepicoloc_run() - Analyzes one secondary dataset against primary
Wrapper for parallel colocalization analysis
}}
\usage{
genepicoloc_wrapper(
  dir_out,
  sumstats_1_args,
  args_df,
  mc_cores = 2,
  verbose = TRUE,
  debug_mode = FALSE,
  max_regions_per_job = 10,
  save_sumstats = FALSE,
  p_filt = 1,
  p_min_save = 5e-08,
  batch_size = NULL
)
}
\arguments{
\item{dir_out}{Character. Output directory path for results.}

\item{sumstats_1_args}{Named list containing primary dataset parameters:
\itemize{
\item coloc_regions_PASS: Data frame with CHR_var, BP_START_var, BP_STOP_var
\item sumstats_1_function: Function name for data retrieval
\item sumstats_1_file: Path to primary summary statistics
\item sumstats_1_type: 'quant' or 'cc'
\item sumstats_1_sdY: Standard deviation (NA for cc)
}}

\item{args_df}{Data frame with secondary dataset specifications:
\itemize{
\item sumstats_2_study: Study identifier
\item sumstats_2_file: Path to summary statistics
\item sumstats_2_function: Retrieval function name
\item sumstats_2_type: 'quant' or 'cc'
\item sumstats_2_sdY: Standard deviation (NA for cc)
}}

\item{mc_cores}{Integer. Cores for parallel processing (default: 10).}

\item{verbose}{Logical. Print progress messages (default: TRUE).}

\item{debug_mode}{Logical. Run sequentially for debugging (default: FALSE).}

\item{max_regions_per_job}{Integer. Maximum regions per job (default: 10).
For eQTL studies with multiple phenotypes, recommended value is not more
than 10. For other studies with a single phenotype it can be increased to 100.}

\item{save_sumstats}{Logical. Whether to save filtered summary statistics
(default: FALSE). Set to TRUE only if you need the filtered summary statistics
for downstream analyses like fine-mapping. WARNING: This substantially increases
disk usage (~20-30GB per 1,00 regions and 10,000 datasets with typical settings).
When FALSE, only colocalization results are saved (~2-3GB).}

\item{p_filt}{Numeric. Maximum p-value threshold for variants to include in
saved summary statistics (default: 1, includes all variants). Only applies
when save_sumstats = TRUE. Set to a lower value (e.g., 0.05) to reduce
storage by excluding variants with high p-values. Note: For fine-mapping
and conditional analyses, keep at 1 to preserve complete LD structure.}

\item{p_min_save}{Numeric. Minimum p-value threshold for saving summary
statistics sumstats_2 (default: 5e-8). Only regions with at least one variant
with p-value below this threshold will be saved when save_sumstats is TRUE}

\item{batch_size}{Integer or NULL. Number of secondary datasets to process per
subjob (default: NULL, which sets it to mc_cores * 10). Controls Level 2
parallelization batching.}
}
\value{
NULL (invisibly). This function is called for its side effects of
writing analysis results to disk in the specified output directory.
}
\description{
Orchestrates parallel colocalization analysis across multiple secondary datasets
against a primary dataset. Automatically splits large region sets into manageable
jobs and handles parallelization.
}
\details{
The function implements a two-level parallelization strategy:
\enumerate{
\item Level 1: Splits regions into jobs (max_regions_per_job each)
\item Level 2: Processes secondary datasets in parallel within each job
}

Output structure:
\itemize{
\item job_XXXX/: Subdirectories for each region job
\item sumstats_1.RDS: Primary dataset for job's regions
\item sumstats.tar: Archive of secondary datasets
\item coloc.tar: Archive of colocalization results
\item Metadata files in parent directory
}
}
\examples{
\dontrun{
sumstats_1_args <- list(
  coloc_regions_PASS = coloc_regions_PASS,
  sumstats_1_function = "retrieve_sumstats_tabix",
  sumstats_1_file = "sumstats_1.gz",
  sumstats_1_type = "quant",
  sumstats_1_sdY = 1
)

args_df <- data.frame(
  sumstats_2_study = c("Study1", "Study2"),
  sumstats_2_file = c("study1_sumstats_2.gz", "study2_sumstats_2.gz"),
  sumstats_2_function = "retrieve_sumstats_tabix",
  sumstats_2_type = "quant",
  sumstats_2_sdY = NA
)

genepicoloc_wrapper(
  dir_out = "results",
  sumstats_1_args = sumstats_1_args,
  args_df = args_df,
  mc_cores = 4
)
}

}
