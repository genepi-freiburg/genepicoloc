% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{handle_underflow}
\alias{handle_underflow}
\title{Handle P-value Underflow}
\usage{
handle_underflow(pvalue_vec, return_nlog10P = FALSE)
}
\arguments{
\item{pvalue_vec}{A numeric or character vector of p-values. Can handle both
regular decimal notation (e.g., 0.001) and scientific notation (e.g., 1e-350).}

\item{return_nlog10P}{Logical. If TRUE, returns -log10 transformed p-values.
If FALSE, returns the p-values as numeric (default: FALSE).}
}
\value{
If return_nlog10P is TRUE, returns a numeric vector of -log10 transformed
p-values. If FALSE, returns the original p-values converted to numeric.
}
\description{
Process p-values to handle underflow in case of very small p-values (p < 1e-320).
This function converts p-values to -log10 scale without requiring high-precision
arithmetic libraries, making it suitable for statistical visualization and analysis.
}
\details{
This function addresses the underflow problem that occurs when p-values are
extremely small (e.g., < 1e-320). Instead of requiring arbitrary precision
arithmetic, it directly converts scientific notation p-values to -log10 scale:
\itemize{
\item For scientific notation (e.g., "5e-200"): -log10(5e-200) = -log10(5) + 200
\item For regular decimals (e.g., "0.001"): -log10(0.001) = 3
}
}
\examples{
# Example with mixed p-value formats
pvals <- c("1e-350", "0.001", "5e-200", "0.05", "1e-10")

# Convert to -log10 scale
result <- handle_underflow(pvals, return_nlog10P = TRUE)
print(result)
# [1] 350.00000   3.00000 199.30103   1.30103  10.00000

# Return as numeric (no transformation)
result2 <- handle_underflow(pvals, return_nlog10P = FALSE)
print(result2)

}
